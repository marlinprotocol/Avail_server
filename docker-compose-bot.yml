services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.server
    env_file:
      - .env
    ports:
      - '3000:8080' # Adjust the ports as needed
    command: node ./dist/index.js
    depends_on:
      - redis
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 0
  redis:
    image: redis:latest
    container_name: redis-server
    command: ['redis-server', '--requirepass', 'password']

  bot:
    build:
      context: .
      dockerfile: Dockerfile.server
    env_file:
      - .env
    command: node ./dist/bot.js
    depends_on:
      - app
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 0
  bot2:
    build:
      context: .
      dockerfile: Dockerfile.server
    env_file:
      - .env
    command: node ./dist/bot.js
    depends_on:
      - app
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 0
  bot3:
    build:
      context: .
      dockerfile: Dockerfile.server
    env_file:
      - .env
    command: node ./dist/bot.js
    depends_on:
      - app
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 0
  bot4:
    build:
      context: .
      dockerfile: Dockerfile.server
    env_file:
      - .env
    command: node ./dist/bot.js
    depends_on:
      - app
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 0
